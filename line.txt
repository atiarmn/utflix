#ifndef DATABASE_H
#define DATABASE_H

#include <iostream>
#include <vector>
#include <string>
#include "film.h"

class User;
class Film;

class Database{
public:
	static Database* get_instance();
	std::vector<Film*> get_all_films();
	std::vector<User*> get_all_uesers();
	void add_film(Film* film);
	void add_user(User* user);
	int find_last_film();
	void delete_film(int film_id);
	int find_last_user();
	bool existed_username(std::string username);
	bool correct_password(std::string username,std::string password);
	User* get_user(std::string username);
	Film* get_film(int film_id);
private:
	static Database* instance;
	std::vector<Film*> films;
	std::vector<User*> users;
	Database();
};

#include "user.h"

#endif#ifndef EXCEPTION_H
#define EXCEPTION_H

#include <iostream>
#include <exception>


class BadRequest:public std::exception{
public:
	virtual const char* what() const throw () {return "Bad Request";}
};
class NotFound:public std::exception{
public:
	virtual const char* what() const throw () {return "Not Found";}
};
class PermissionDen:public std::exception{
	virtual const char* what() const throw () {return "Permission Denied";}
};
#endif#ifndef FILM_H
#define FILM_H

#include "database.h"
#include "film_service.h"
#include <map>
#include <string>

class FilmService;

class Film{
public:
	Film(std::map<std::string,std::string> informations);
	void post();
	int get_id(){return id;}
protected:
	FilmService* service;
	std::map<std::string,std::string> post_informations;
	std::string name;
	std::string price;
	std::string year;
	std::string length;
	std::string summary;
	std::string director;
	int id;
	int point;
};

#endif#ifndef FILM_SERVICE_H
#define FILM_SERVICE_H

#include "film.h"
#include <string>
#include <map>
#include "database.h"

class Film;

class FilmService{
public:
	void post(Film* new_film);
	void delete_film(std::map<std::string,std::string> informations){}
	void get(std::map<std::string,std::string> informations){}
};

#endif#ifndef INPUT_HANDLER_H
#define INPUT_HANDLER_H

#include <string>
#include <vector>
#include <iostream>
#include <map>
#include "request.h"
#include "exception.h"
#include <regex>

class InputHandler{
public:
	InputHandler();
	void run();
private:
	void handle();
	void post();
	void put();
	void delete_func();
	void get();
	void check_email(std::string email);
	void check_num(std::string number);
	void get_informations();
	std::vector<std::string> input;
	std::map<std::string,std::string> informations;
	Request* request;
};

#endif#ifndef LOGIN_H
#define LOGIN_H

#include <map>
#include "exception.h"
#include "database.h"

class Login{
public:
	User* post(std::map<std::string,std::string> informations);
};
#endif#include <map>
#include <string>
#include <iostream>
#include "user.h"
#include "exception.h"

class Money{
public:
	void post_publisher(){}
	void post_user(User* logedin_user,std::map<std::string,std::string> informations);
};#ifndef PUBLISHER_H
#define PUBLISHER_H

#include "user.h"
#include <vector>
#include <string>
#include <iostream>

class Publisher:public User{
public:
	Publisher(std::map<std::string,std::string> _informations):User(_informations){type=PUBLISHER;}
	void add_film(int film_id);
	void add_follower(int user_id);
private:
	std::vector<int> post_films;	
	std::vector<int> followers;	
};

#endif#ifndef REQUEST_H
#define REQUEST_H

#include <vector>
#include <string>
#include <iostream>
#include "signup.h"
#include "film.h"
#include "user.h"
#include "film_service.h"
#include "exception.h"
#include "login.h"
#include "money.h"
#include <map>

class Request{
public:
	Request();
	void get_informations(std::map<std::string,std::string> _informations);
	void signup();
	void login();
	void post_money_user();
	void post_films();
	void put_films(){}
	void delete_films(){}
	void get_followers(){}
	void post_money_publisher(){}
	void get_published(){}
	void post_replies(){}
	void delete_comments(){}
	void post_followers(){}
	void get_films_find(){}
	void get_films_detail(){}
	void post_buy(){}
	void post_rate(){}
	void post_comments(){}
	void get_purchased(){}
	void get_notification(){}
	void get_notification_read(){}
private:
	std::map<std::string, std::string> informations;
	User* logedin_user;
};

#endif#ifndef SIGNUP_H
#define SIGNUP_H

#include "database.h"
#include "publisher.h"
#include "exception.h"
#include "user.h"
#include <string>
#include <iostream>
#include <map>

class Signup{
public:
	void post(std::map<std::string,std::string> informations);	
};
#endif#ifndef USER_H
#define USER_H

#include "database.h"
#include "exception.h"
#include <vector>
#include <string>
#include <iostream>
#include <map>

#define USER 0
#define PUBLISHER 1

class Database;

class User{
public:
	User(std::map<std::string,std::string> _informations);
	void get_login();
	void buy_film(int film_id);
	std::string get_username();
	std::string get_password();
	void add_money(int amount);
	int get_type(){return type;}
protected:
	int type;
	int id;
	bool login;
	int money;
	std::string age;
	std::string username;
	std::string password;
	std::string email;
	std::map<std::string,std::string> informations;
	std::vector<int> purchased_films;
};

#endifclass UserService : public User{};#include "database.h"

Database* Database::instance = 0;

Database* Database::get_instance() {
      if (instance == 0)
      	instance = new Database();
      return instance;
}
std::vector<Film*> Database::get_all_films(){
	return this->films;
}
std::vector<User*> Database::get_all_uesers(){
	return this->users;
}
void Database::add_film(Film* film){
	(this->films).push_back(film);
}
void Database::add_user(User* user){
	(this->users).push_back(user);
}
Film* Database::get_film(int film_id){
	for(int i=0;i<films.size();i++)
		if(films[i]->get_id()==film_id)
			return films[i];
}
void Database::delete_film(int film_id){
	for(int i=0;i<films.size();i++)
		if(films[i]->get_id()==film_id)
			films.erase(films.begin()+i);
}
int Database::find_last_user(){
	return users.size();
}
bool Database::existed_username(std::string username){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username)
			return true;
	return false;
}
bool Database::correct_password(std::string username,std::string password){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username && users[i]->get_password()==password)
			return true;
	return false;
}
User* Database::get_user(std::string username){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username)
			return users[i];
}
int Database::find_last_film(){
	return films.size();
}
Database::Database() {}
#include "film.h"
Film::Film(std::map<std::string,std::string> informations){
	post_informations=informations;
	name=informations["name"];
	price=informations["price"];
	year=informations["year"];
	length=informations["length"];
	summary=informations["summary"];
	director=informations["director"];
	point=0;
	Database* database = database->get_instance();
	id=database->find_last_film()+1;
	service=new	FilmService();
}
void Film::post(){
	service->post(this);
}#include "film_service.h"

void FilmService::post(Film* new_film){
	Database* database = database->get_instance();
	database->add_film(new_film);
}#include "input_handler.h"
#include <iostream>

InputHandler::InputHandler(){
	request = new Request();
}
void InputHandler::run(){
	std::string line;
	while(std::getline(std::cin,line)){
		std::string temp;
		int spaceFlag=0;
		int j=0;
		for(int i=0;i<line.size()+1;i++){
			if(line[i]!=' ' && line[i]!='\0'){
				spaceFlag=0;
				temp+=line[i];
			}
			else{
				if(spaceFlag!=1){
					input.push_back(temp);
					temp="";
					spaceFlag=1;
				}
			}
		}
		get_informations();
		request->get_informations(informations);
		handle();
		informations.clear();
		input.clear();
	}
}
void InputHandler::get_informations(){
	int start=3;
	if(input[2]=="read")
		start++;
	for(int i=start;i<input.size();i+=2){
		if(informations[input[i]]=="\0" )
			informations[input[i]]=input[i+1];
		else{
			throw BadRequest();
		}
	}
}
void InputHandler::handle(){
	if(input[0]=="POST"){
		try{
			post();
		}catch(std::exception& ex){
			std::cerr<<ex.what()<<std::endl;
		}
	}
	if(input[0]=="GET")
		get();
	if(input[0]=="DELETE")
		delete_func();
	if(input[0]=="PUT")
		put();
	if(input[0]!="POST" && input[0]!="GET" && input[0]!="DELETE" && input[0]!= "PUT")
		throw BadRequest();
}
void InputHandler::check_email(std::string email){
	const std::regex email_pattern
		("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
		if(!std::regex_match(email,email_pattern)){
			throw BadRequest();
		}
}
void InputHandler::check_num(std::string num){
	for(int i=0;i<num.size();i++)
		if(num[i]>57 || num[i]<48){
			throw BadRequest();
		}
}
void InputHandler::post(){
	int input_error_flag=0;
	if(input[1]=="signup"){
		if(informations["email"]=="\0" || informations["password"]=="\0" || 
			informations["age"]=="\0" || informations["username"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_email(informations["email"]);
		check_num(informations["age"]);
		input_error_flag=1;
		request->signup();
	}
	if(input[1]=="login"){
		if(informations["username"]=="\0" || informations["password"]=="\0" || input[2]!="?")
			throw BadRequest();
		input_error_flag=1;
		request->login();
	}
	if(input[1]=="films"){
		if(informations["name"]=="\0" || informations["year"]=="\0" || informations["length"]=="\0" || 
			informations["price"]=="\0" || informations["summary"]=="\0" || informations["director"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["year"]);
		input_error_flag=1;
		request->post_films();
	}
	if(input[1]=="money"){
		if(input[2]!="?")
			request->post_money_publisher();
		else if(input[3]=="amount"){
			check_num(informations["amount"]);
			request->post_money_user();
		}
		else
			throw BadRequest();
		input_error_flag=1;
	}
	if(input[1]=="replies"){
		if(informations["film_id"]=="\0" || informations["comment_id"]=="\0" || informations["content"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["comment_id"]);
		request->post_replies();
		input_error_flag=1;
	}
	if(input[1]=="followers"){
		if(informations["user_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["user_id"]);
		request->post_followers();
		input_error_flag=1;
	}
	if(input[1]=="buy"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->post_buy();
		input_error_flag=1;
	}
	if(input[1]=="rate"){
		if(informations["film_id"]=="\0" || informations["score"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["score"]);
		request->post_rate();
		input_error_flag=1;
	}
	if(input[1]=="comments"){
		if(informations["film_id"]=="\0" || informations["content"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->post_comments();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw BadRequest();
	//not found
}
void InputHandler::put(){
	int input_error_flag=0;
	if(input[1]=="films"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->put_films();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw BadRequest();
}
void InputHandler::get(){
	int input_error_flag=0;
	if(input[1]=="followers"){
		input_error_flag=1;
		request->get_followers();
	}
	if(input[1]=="films"){
		if(input[2]!="?")
			throw BadRequest();
		if(input.size()==3)
			request->get_films_find();
		if(input[3]=="film_id"){
			check_num(informations["film_id"]);
			request->get_films_detail();
		}
		else
			request->get_films_find();
		input_error_flag=1;
	}
	if(input[1]=="published"){
		if(input[2]!="?")
			throw BadRequest();
		request->get_published();
	}
	if(input[1]=="purchased"){
		if(input[2]!="?")
			throw BadRequest();
		input_error_flag=1;
		request->get_purchased();
	}
	if(input[1]=="notification"){
		if(input[2]=="read"){
			if(input[3]!="?" || informations["limit"]=="\0")
				throw BadRequest();
			check_num(informations["limit"]);
			request->get_notification_read();
		}
		input_error_flag=1;
		request->get_notification();
	}
	if(input_error_flag==0)
		throw BadRequest();
}
void InputHandler::delete_func(){
	int input_error_flag=0;
	if(input[1]=="films"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->delete_films();
		input_error_flag=1;
	}
	if(input[1]=="comments"){
		if(informations["film_id"]=="\0" || informations["comment_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["comment_id"]);
		request->delete_comments();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw BadRequest();
}#include "login.h"

User* Login::post(std::map<std::string,std::string> informations){
	Database* database = database->get_instance();
	if(database->existed_username(informations["username"])){
		if(database->correct_password(informations["username"],informations["password"]))
			return database->get_user(informations["username"]);
		else
			throw BadRequest();
	}
	else 
		throw NotFound();
}#include "input_handler.h"

int main(){
	InputHandler input_handler;
	input_handler.run();
}#include "money.h"

void Money::post_user(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw BadRequest();
	int amount=std::stoi(informations["amount"],nullptr,0);
	logedin_user->add_money(amount);
}#include "publisher.h"

void Publisher::add_film(int film_id){
	post_films.push_back(film_id);
}
void Publisher::add_follower(int user_id){
	followers.push_back(user_id);
}#include "request.h"
Request::Request(){
	std::map<std::string,std::string> informations ();
}
using namespace std;
void Request::get_informations(std::map<std::string,std::string> _informations){
	informations.clear();
	informations = _informations;
}
void Request::signup(){
	Signup* signup = new Signup();
	signup->post(informations);
	std::cout<<"OK"<<std::endl;
	logedin_user = new User(informations);
}
void Request::login(){
	Login* login = new	Login();
	logedin_user = new User(informations);
	logedin_user = login->post(informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_money_user(){
	Money* money = new Money();
	money->post_user(logedin_user,informations);
	std::cout<<"OK"<<std::endl;

}
void Request::post_films(){
	Film* film = new Film(informations);
	film->post();
	if(logedin_user->get_type())
		dynamic_cast<Publisher*> (logedin_user)->add_film(film->get_id());
	else
		throw PermissionDen();
}#include "signup.h"


void Signup::post(std::map<std::string,std::string> informations){
	Database* database = database->get_instance();
	if(database->existed_username(informations["username"]))
		throw BadRequest();
	if(informations["publisher"]=="true"){
		User* new_user = new Publisher(informations);
		database->add_user(new_user);
	}
	else if(informations["publisher"]=="false" || informations["publisher"]=="\0"){
		User* new_user = new User(informations);
		database->add_user(new_user);
	}
	else
		throw BadRequest();
}#include "user.h"
User::User(std::map<std::string,std::string> _informations){
	informations=_informations;
	username=informations["username"];
	password=informations["password"];
	email=informations["email"];
	age=informations["age"];
	money = 0;
	Database* database = database->get_instance();
	id=database->find_last_user()+1;
	if(informations["publisher"]=="true")
		type=PUBLISHER;
	else
		type=USER;
}
void User::get_login(){
	login=true;
}
void User::buy_film(int film_id){
	purchased_films.push_back(film_id);
}
std::string User::get_username(){
	return username;
}
std::string User::get_password(){
	return password;
}
void User::add_money(int amount){
	money+=amount;
}
CC = g++ --std=c++11

all: 1.out

1.out: main.o input_handler.o request.o signup.o database.o user.o publisher.o login.o money.o film.o film_service.o
	$(CC) main.o input_handler.o request.o database.o user.o publisher.o signup.o login.o money.o film.o film_service.o -o 1.out

main.o: main.cpp input_handler.h
	$(CC) -c main.cpp -o main.o

input_handler.o: input_handler.cpp input_handler.h request.h exception.h
	$(CC) -c input_handler.cpp -o input_handler.o

request.o: request.cpp request.h exception.h signup.h user.h login.h money.h film.h film_service.h
	$(CC) -c request.cpp -o request.o

signup.o: signup.cpp signup.h database.h exception.h user.h publisher.h
	$(CC) -c signup.cpp -o signup.o

database.o: database.cpp database.h user.h film.h
	$(CC) -c database.cpp -o database.o

user.o: user.cpp user.h database.h exception.h
	$(CC) -c user.cpp -o user.o

publisher.o: publisher.cpp publisher.h user.h
	$(CC) -c publisher.cpp -o publisher.o

login.o: login.cpp login.h exception.h database.h
	$(CC) -c login.cpp -o login.o

money.o: money.cpp money.h user.h exception.h
	$(CC) -c money.cpp -o money.o

film.o: film.cpp film.h film_service.h database.h
	$(CC) -c film.cpp -o film.o

film_service.o: film_service.cpp film_service.h film.h database.h
	$(CC) -c film_service.cpp -o film_service.o
	
.PHONY: clean
clean:
	rm *.o
	rm 1.out