#include "buy.h"

void Buy::post(User* logedin_user,std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	User* publisher;
	std::string notif;
	if(database->existed_film(film_id)){
		int price=(database->get_film(film_id))->get_price();
		if(logedin_user->get_money() < price)
			throw PermissionDen();
		if(database->get_film(film_id)->deleted())
			throw NotFound();
		publisher=database->get_user_by_id((database->get_film(film_id))->get_publisher_id());
		notif+="User ";
		notif+=logedin_user->get_username();
		notif+=" with id ";
		notif+=std::to_string(logedin_user->get_id());
		notif+=" buy your film ";
		notif+=database->get_film(film_id)->get_name();
		notif+=" with id ";
		notif+=std::to_string(database->get_film(film_id)->get_id());
		notif+=".";
		publisher->add_notif(notif);
		logedin_user->buy_film(film_id,price);
		database->add_network_money(price);
	}
	else
		throw NotFound();
}#include "comment.h"

Comment::Comment(std::string _content,int _user_id){
	service = new CommentService();
	content=_content;
	user_id=_user_id;
}
void Comment::post(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user->film_bought(std::stoi(informations["film_id"],nullptr,0)))
		service->post(this,informations,logedin_user);
	else 
		throw BadRequest();
}
void Comment::set_id(int _id){
	id=_id;
}
void Comment::delete_comment(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user->get_type()){
		if(logedin_user->find_film(std::stoi(informations["film_id"],nullptr,0)))
			service->delete_comment(informations);
		else
			throw BadRequest();
	}
	else
		throw PermissionDen();
}
void Comment::post_reply(std::string content){
	replies.push_back(content);
}#include "comment_service.h"

void CommentService::post(Comment* comment,std::map<std::string,std::string> informations,User* logedin_user){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	User* publisher;
	if(database->existed_film(film_id)){
		Film* film=database->get_film(film_id);
		if(film->deleted())
			throw NotFound();
		std::string notif;
		publisher=database->get_user_by_id(film->get_publisher_id());
		notif+="User ";
		notif+=logedin_user->get_username();
		notif+=" with id ";
		notif+=std::to_string(logedin_user->get_id());
		notif+=" comment on your film ";
		notif+=film->get_name();
		notif+=" with id ";
		notif+=std::to_string(film->get_id());
		notif+=".";
		publisher->add_notif(notif);
		film->post_comment(comment);
		comment->set_id(film->get_comment_id());
	}
	else
		throw NotFound();

}
void CommentService::delete_comment(std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	if(database->existed_film(film_id)){
		Film* film=database->get_film(film_id);
		if(film->deleted())
			throw NotFound();
		film->delete_comment(std::stoi(informations["comment_id"],nullptr,0));
	}
	else
		throw NotFound();
}#include "database.h"

Database* Database::instance = 0;

Database* Database::get_instance() {
      if (instance == 0)
      	instance = new Database();
      return instance;
}

void Database::add_film(Film* film){
	(this->films).push_back(film);
	sorted_films.push_back(film);
}
void Database::add_user(User* user){
	(this->users).push_back(user);
}
Film* Database::get_film(int film_id){
	for(int i=0;i<films.size();i++)
		if(films[i]->get_id()==film_id)
			return films[i];
}

int Database::find_last_user(){
	return users.size();
}
bool Database::existed_username(std::string username){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username)
			return true;
	return false;
}
bool Database::existed_user_id(int user_id){
	for(int i=0;i<users.size();i++)
		if(i+1==user_id)
			return true;
	return false;
}
bool Database::existed_film(int film_id){
	for(int i=0;i<films.size();i++)
		if(films[i]->get_id()==film_id)
			return true;
	return false;
}
bool Database::correct_password(std::string username,std::string password){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username && users[i]->get_password()==password)
			return true;
	return false;
}
User* Database::get_user(std::string username){
	for(int i=0;i<users.size();i++)
		if(users[i]->get_username()==username)
			return users[i];
}
User* Database::get_user_by_id(int id){
	for(int i=0;i<users.size();i++)
		if(i+1==id)
			return users[i];
	throw NotFound();
}
int Database::find_last_film(){
	return films.size();
}
void Database::add_network_money(int money){
	network_money+=money;
}
void Database::set_publisher_money(User* logedin_user){
	for(int i=0;i<films.size();i++)
		if(films[i]->get_publisher_id()==logedin_user->get_id())
			for(int j=0;j<users.size();j++){
				if(users[j]->film_bought(films[i]->get_id())){
					if(films[i]->get_type()=="weak"){
						network_money -=films[i]->get_price();
						network_money+=films[i]->get_price()*(0.2);
						logedin_user->add_money(films[i]->get_price()*(0.8));
					}
					if(films[i]->get_type()=="avarage"){
						network_money -=films[i]->get_price();
						network_money+=films[i]->get_price()*(0.1);
						logedin_user->add_money(films[i]->get_price()*(0.9));
					}
					if(films[i]->get_type()=="good"){
						network_money -=films[i]->get_price();
						network_money+=films[i]->get_price()*(0.05);
						logedin_user->add_money(films[i]->get_price()*(0.95));
					}
				}
			}
}
void Database::sort_films_by_rate(User* logedin_user){
	Film* temp = new Film();
	for(int i=0;i<sorted_films.size();i++){
		if(i+1>=sorted_films.size())
			break;
		if(logedin_user->film_bought(sorted_films[i]->get_id()))
			continue;
		if((sorted_films[i]->get_rate())<(sorted_films[i+1]->get_rate())){
			temp=sorted_films[i];
			sorted_films[i]=sorted_films[i+1];
			sorted_films[i+1]=temp;
		}
		else if((sorted_films[i]->get_rate())==(sorted_films[i+1]->get_rate()) && 
			(std::stoi(sorted_films[i]->get_year(),nullptr,0)>std::stoi(sorted_films[i+1]->get_year(),nullptr,0))){
			temp=sorted_films[i];
			sorted_films[i]=sorted_films[i+1];
			sorted_films[i+1]=temp;
		}
	}
}
std::vector<Film*> Database::get_sorted_films(User* logedin_user){
	sort_films_by_rate(logedin_user);
	return sorted_films;
}
std::vector<User*> Database::get_all_users(){
	return this->users;
}
Database::Database() {}
#include "film.h"
Film::Film(std::map<std::string,std::string> informations,int _publisher_id){
	name=informations["name"];
	price=informations["price"];
	year=informations["year"];
	length=informations["length"];
	summary=informations["summary"];
	director=informations["director"];
	publisher_id=_publisher_id;
	rate=0;
	is_deleted=false;
	if(publisher_id==0)
		throw PermissionDen();
	point=0;
	Database* database = database->get_instance();
	id=database->find_last_film()+1;
	service=new	FilmService();
}
Film::Film(){
	point=0;
	service=new	FilmService();
}
void Film::post(User* logedin_user){
	if(logedin_user==NULL)
		throw PermissionDen();
	service->post(this,logedin_user);
}
void Film::put(std::map<std::string,std::string> informations){
	change_infos(informations);
}
void Film::set_delete(){
	is_deleted=true;
}
void Film::change_infos(std::map<std::string,std::string> informations){
	if(informations["name"]!="\0")
		name=informations["name"];
	if(informations["year"]!="\0")
		year=informations["year"];
	if(informations["length"]!="\0")
		length=informations["length"];
	if(informations["summary"]!="\0")
		summary=informations["summary"];
	if(informations["director"]!="\0")
		director=informations["director"];
}
void Film::delete_film(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw PermissionDen();
	service->delete_film(informations);
}
void Film::get_detail(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw PermissionDen();
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	service->get(logedin_user,informations);
}
void Film::get_films(std::map<std::string,std::string> informations){
	service->search(informations);
}
void Film::print_details(User* logedin_user){
	std::cout<<"Details of Film "<<name<<std::endl;
	std::cout<<"Id = "<<id<<std::endl;
	std::cout<<"Director = "<<director<<std::endl;
	std::cout<<"Length = "<<length<<std::endl;
	std::cout<<"Year = "<<year<<std::endl;
	std::cout<<"Summary = "<<summary<<std::endl;
	std::cout<<"Rate = "<<rate<<std::endl;
	std::cout<<"Price = "<<price<<"\n"<<std::endl;
	std::cout<<"Comments"<<std::endl;
	for(int i=0;i<comments.size();i++){
		std::cout<<comments[i]->get_id()<<" ";
		std::cout<<comments[i]->get_content()<<" ";
		for(int j=0;j<comments[i]->replies_num();j++)
			std::cout<<comments[i]->get_reply(j)<<std::endl;
	}
	std::cout<<"\n";
	std::cout<<"Recommendation Film"<<std::endl;
	std::cout<<"#. Film Id | Film Name | Film Length | Film Director"<<std::endl;
	for(int i=0;i<4;i++){
		if(i>=(service->recommend(logedin_user)).size())
			break;
		std::cout<<i<<'.';
		std::cout<<(service->recommend(logedin_user))[i]->get_id()<<" | ";
		std::cout<<(service->recommend(logedin_user))[i]->get_name()<<" | ";
		std::cout<<(service->recommend(logedin_user))[i]->get_length()<<" | ";
		std::cout<<(service->recommend(logedin_user))[i]->get_director()<<std::endl;
	}
}
void Film::set_rate(int user_id,int _rate){
	rates[user_id]=_rate;
	rate=0;
	for(auto it = rates.begin();it!=rates.end();it++)
		rate=(rate+rates[it->first]);
	rate=rate/rates.size();
	if(rate>=8)
		type="good";
	if(rate>=5 && rate<8)
		type="avarage";
	if(rate<5)
		type="weak";
}
void Film::post_rate(User* logedin_user,std::map<std::string,std::string> informations){
	service->rate(logedin_user,informations);
}
void Film::post_comment(Comment* new_comment){
	comments.push_back(new_comment);
}
int Film::get_comment_id(){
	return comments.size();
}
void Film::delete_comment(int comment_id){
	comments.erase(comments.begin()+comment_id-1);
}
Comment* Film::find_comment(int comment_id){
	for(int i=0;i<comments.size();i++)
		if(comments[i]->get_id()==comment_id)
			return comments[i];
	throw NotFound();
}
bool Film::check_name(std::string _name){
	if(_name=="\0")
		return true;
	else if(name==_name)
		return true;
	else
		return false;
}
bool Film::check_rate(int min_rate){
	if(min_rate==0)
		return true;
	else if(rate>=min_rate)
		return true;
	else
		return false;
}
bool Film::check_price(std::string _price){
	if(_price=="\0")
			return true;
	else if(price==_price)
			return true;
	else
			return false;
}
bool Film::check_max_year(int max_year){
	if(max_year==0)
		return true;
	else if(std::stoi(year,nullptr,0)<=max_year)
		return true;
	else
		return false;
}
bool Film::check_min_year(int min_year){
	if(min_year==0)
		return true;
	else if(std::stoi(year,nullptr,0)<=min_year)
		return true;
	else
		return false;
}
bool Film::check_director(std::string _director){
	if(_director=="\0")
		return true;
	else if(director==_director)
		return true;
	else
		return false;
}#include "film_service.h"

void FilmService::post(Film* new_film,User* logedin_user){
	Database* database = database->get_instance();
	database->add_film(new_film);
	logedin_user->send_notif_to_followers();
}

void FilmService::put(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw PermissionDen();
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	if(database->existed_film(film_id) && logedin_user->find_film(film_id)){
		(database->get_film(film_id))->put(informations);
	}
	else
		throw NotFound();
}
void FilmService::delete_film(std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	if(database->existed_film(film_id)){
		Film* film=database->get_film(film_id);
		film->set_delete();
	}
	else 
		throw NotFound(); 	
}
void FilmService::get(User* logedin_user,std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	Database* database = database->get_instance();
	if(database->existed_film(film_id)){
		Film* film = database->get_film(film_id);	
		if(film->deleted())
			throw NotFound();
		film->print_details(logedin_user);
	}
	else
		throw NotFound();
}
void FilmService::search(std::map<std::string,std::string> informations){
	Database* database = database->get_instance();
	std::string name,director,price;
	int min_rate,min_year,max_year,num=1;
	name=informations["name"];
	if(informations["min_rate"]=="\0")
		min_rate=0;
	else
		min_rate=std::stoi(informations["min_rate"],nullptr,0);
	if(informations["min_year"]=="\0")
		min_year=0;
	else
		min_year=std::stoi(informations["min_year"],nullptr,0);
	price=informations["price"];
	if(informations["max_year"]=="\0")
		max_year=0;
	else
		max_year=std::stoi(informations["max_year"],nullptr,0);
	director=informations["director"];
	std::cout<<"#. Film Id | Film Name | Film Length | Film price | Rate | Production Year | Film Director"<<std::endl;
	for(int i=0;i<(database->get_all_users()).size();i++){
		if(!((database->get_all_users())[i]->get_type()))
			continue;
		for(int j=0;j<(database->get_sorted_films((database->get_all_users())[i]).size());j++){
			if(database->get_sorted_films((database->get_all_users())[i])[j]->check_name(name) &&
			database->get_sorted_films((database->get_all_users())[i])[j]->check_rate(min_rate) &&
			database->get_sorted_films((database->get_all_users())[i])[j]->check_min_year(min_year)&&
			database->get_sorted_films((database->get_all_users())[i])[j]->check_max_year(max_year)&&
			database->get_sorted_films((database->get_all_users())[i])[j]->check_price(price)&&
			database->get_sorted_films((database->get_all_users())[i])[j]->check_director(director)){
				print(database->get_sorted_films((database->get_all_users())[i])[j],num);
				num++;
			}

		}
	}
}
void FilmService::print(Film* film,int num){
	std::cout<<num<<". ";
	std::cout<<film->get_id()<<" | ";
	std::cout<<film->get_name()<<" | ";
	std::cout<<film->get_length()<<" | ";
	std::cout<<film->get_price()<<" | ";
	std::cout<<film->get_rate()<<" | ";
	std::cout<<film->get_year()<<" | ";
	std::cout<<film->get_director()<<" | "<<std::endl;
}
void FilmService::rate(User* logedin_user,std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	int score = std::stoi(informations["score"],nullptr,0);
	User* publisher;
	std::string notif; 
	Database* database = database->get_instance();
	if(database->existed_film(film_id)){
		Film* film = database->get_film(film_id);
		if(film->deleted())
			throw NotFound();
		film->set_rate(logedin_user->get_id(),score);
		publisher=database->get_user_by_id((database->get_film(film_id))->get_publisher_id());
		notif+="User ";
		notif+=logedin_user->get_username();
		notif+=" with id ";
		notif+=std::to_string(logedin_user->get_id());
		notif+=" rate your film ";
		notif+=database->get_film(film_id)->get_name();
		notif+=" with id ";
		notif+=std::to_string(database->get_film(film_id)->get_id());
		notif+=".";
		publisher->add_notif(notif);
	}
	else
		throw NotFound();
}
std::vector<Film*> FilmService::recommend(User* logedin_user){
	Database* database = database->get_instance();
	return database->get_sorted_films(logedin_user);
}#include "followers.h"

void Followers::post(User* logedin_user, std::map<std::string,std::string> informations){
	int user_id=std::stoi(informations["user_id"],nullptr,0);
	Database* database = database->get_instance();
	if(database->existed_user_id(user_id)){
		User* user = database->get_user_by_id(user_id);
		if(user->get_type()){
			if(logedin_user->existed_follower(user_id))
				throw BadRequest();
			logedin_user->follow_publisher(user_id);
			user->add_follower(logedin_user->get_id());
			std::string notif;
			notif+="User ";
			notif+=logedin_user->get_username();
			notif+=" with id ";
			notif+=std::to_string(logedin_user->get_id());
			notif+=" follow you.";
			user->add_notif(notif);
		}
		else
			throw NotFound();
	}
	else
		throw NotFound();
}
void Followers::get(User* logedin_user){
	if(!(logedin_user->get_type()))
		throw PermissionDen();
	Database* database = database->get_instance();
	std::cout<<"List of Followers"<<std::endl;
	std::cout<<"#. User Id | User Username | User Email"<<std::endl;
	for(int i=0;i<(logedin_user->get_followers()).size();i++){
		std::cout<<i+1<<". "<<database->get_user_by_id((logedin_user->get_followers())[i])->get_id()<<" | ";
		std::cout<<database->get_user_by_id((logedin_user->get_followers())[i])->get_username()<<" | ";
		std::cout<<database->get_user_by_id((logedin_user->get_followers())[i])->get_email()<<" | "<<std::endl;
	}
}
#include "input_handler.h"
#include <iostream>

InputHandler::InputHandler(){
	request = new Request();
}
void InputHandler::run(){
	std::string line;
	while(std::getline(std::cin,line)){
		std::string temp;
		int spaceFlag=0;
		int j=0;
		for(int i=0;i<line.size()+1;i++){
			if(line[i]!=' ' && line[i]!='\0'){
				spaceFlag=0;
				temp+=line[i];
			}
			else{
				if(spaceFlag!=1){
					input.push_back(temp);
					temp="";
					spaceFlag=1;
				}
			}
		}
		try{
			get_informations();
			request->get_informations(informations);
			handle();
		}catch(std ::exception& ex){
			std::cout<<ex.what()<<std::endl;
		}
		informations.clear();
		for(int i=0;i<input.size();i++)
			input[i]="";
		input.clear();
	}
}
void InputHandler::get_informations(){
	int start=3;
	if(input[2]=="read")
		start++;
	for(int i=start;i<input.size();i+=2){
		if(informations[input[i]]=="\0" )
			informations[input[i]]=input[i+1];
		else{
			throw BadRequest();
		}
	}
}
void InputHandler::handle(){
	if(input[0]=="POST")
		post();
	if(input[0]=="GET")
		get();
	if(input[0]=="DELETE")
		delete_func();
	if(input[0]=="PUT"){
		put();
	}
	if(input[0]=="")
		return;
	if(input[0]!="POST" && input[0]!="GET" && input[0]!="DELETE" && input[0]!= "PUT")
		throw BadRequest();
}
void InputHandler::check_email(std::string email){
	const std::regex email_pattern
		("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
		if(!std::regex_match(email,email_pattern)){
			throw BadRequest();
		}
}
void InputHandler::check_num(std::string num){
	for(int i=0;i<num.size();i++)
		if(num[i]>57 || num[i]<48){
			throw BadRequest();
		}
}
void InputHandler::post(){
	int input_error_flag=0;
	if(input[1]=="signup"){
		if(informations["email"]=="\0" || informations["password"]=="\0" || 
			informations["age"]=="\0" || informations["username"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_email(informations["email"]);
		check_num(informations["age"]);
		input_error_flag=1;
		request->signup();
	}
	if(input[1]=="login"){
		if(informations["username"]=="\0" || informations["password"]=="\0" || input[2]!="?")
			throw BadRequest();
		input_error_flag=1;
		request->login();
	}
	if(input[1]=="films"){
		if(informations["name"]=="\0" || informations["year"]=="\0" || informations["length"]=="\0" || 
			informations["price"]=="\0" || informations["summary"]=="\0" || informations["director"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["year"]);
		check_num(informations["price"]);
		input_error_flag=1;
		request->post_films();
	}
	if(input[1]=="money"){
		if(input[2]!="?")
			request->post_money_publisher();
		else if(input[3]=="amount"){
			check_num(informations["amount"]);
			request->post_money_user();
		}
		else
			throw BadRequest();
		input_error_flag=1;
	}
	if(input[1]=="replies"){
		if(informations["film_id"]=="\0" || informations["comment_id"]=="\0" || informations["content"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["comment_id"]);
		request->post_replies();
		input_error_flag=1;
	}
	if(input[1]=="followers"){
		if(informations["user_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["user_id"]);
		request->post_followers();
		input_error_flag=1;
	}
	if(input[1]=="buy"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->post_buy();
		input_error_flag=1;
	}
	if(input[1]=="rate"){
		if(informations["film_id"]=="\0" || informations["score"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["score"]);
		if(std::stoi(informations["score"],nullptr,0)>10 || std::stoi(informations["score"],nullptr,0)<1)
			throw BadRequest();
		request->post_rate();
		input_error_flag=1;
	}
	if(input[1]=="comments"){
		if(informations["film_id"]=="\0" || informations["content"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->post_comments();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw NotFound();
}
void InputHandler::put(){
	int input_error_flag=0;
	if(input[1]=="films"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->put_films();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw BadRequest();
}
void InputHandler::get(){
	int input_error_flag=0;
	if(input[1]=="followers"){
		input_error_flag=1;
		request->get_followers();
	}
	if(input[1]=="films"){
		if(input[2]!="?")
			throw BadRequest();
		if(input.size()==3)
			request->get_films_find();
		if(input[3]=="film_id"){
			check_num(informations["film_id"]);
			request->get_films_detail();
		}
		else
			request->get_films_find();
		input_error_flag=1;
	}
	if(input[1]=="published"){
		if(input[2]!="?")
			throw BadRequest();
		request->get_published();
	}
	if(input[1]=="purchased"){
		if(input[2]!="?")
			throw BadRequest();
		input_error_flag=1;
		request->get_purchased();
	}
	if(input[1]=="notifications"){
		if(input[2]=="read"){
			if(input[3]!="?" || informations["limit"]=="\0")
				throw BadRequest();
			check_num(informations["limit"]);
			request->get_notifications_read();
		}
		input_error_flag=1;
		request->get_notifications();
	}
	if(input_error_flag==0)
		throw NotFound();
}
void InputHandler::delete_func(){
	int input_error_flag=0;
	if(input[1]=="films"){
		if(informations["film_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		request->delete_films();
		input_error_flag=1;
	}
	if(input[1]=="comments"){
		if(informations["film_id"]=="\0" || informations["comment_id"]=="\0" || input[2]!="?")
			throw BadRequest();
		check_num(informations["film_id"]);
		check_num(informations["comment_id"]);
		request->delete_comments();
		input_error_flag=1;
	}
	if(input_error_flag==0)
		throw NotFound();
}#include "login.h"

User* Login::post(std::map<std::string,std::string> informations){
	Database* database = database->get_instance();
	if(database->existed_username(informations["username"])){
		if(database->correct_password(informations["username"],informations["password"]))
			return database->get_user(informations["username"]);
		else
			throw BadRequest();
	}
	else 
		throw NotFound();
}#include "input_handler.h"

int main(){
	InputHandler input_handler;
	input_handler.run();
}#include "money.h"

void Money::post_publisher(User* logedin_user){
	if(logedin_user==NULL)
		throw BadRequest();
	if(!logedin_user->get_type())
		throw BadRequest();
	Database* database = database->get_instance();
	database->set_publisher_money(logedin_user);
}
void Money::post_user(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw BadRequest();
	int amount=std::stoi(informations["amount"],nullptr,0);
	logedin_user->add_money(amount);
}#include "notif_service.h"

void NotifService::get_notifications(User* logedin_user){
	if(logedin_user==NULL)
		throw BadRequest();
	logedin_user->print_unread_notifs();
}
void NotifService::get_notifications_read(User* logedin_user,std::map<std::string,std::string> informations){
	if(logedin_user==NULL)
		throw BadRequest();
	int limit = std::stoi(informations["limit"],nullptr,0);
	logedin_user->print_read_notifs(limit);
}#include "publisher.h"

void Publisher::add_film(int film_id){
	posted_films.push_back(film_id);
}
void Publisher::send_notif_to_followers(){
	Database* database = database->get_instance();
	std::string notif;
	notif+="Publisher ";
	notif+=username;
	notif+=" with id ";
	notif+=std::to_string(id);
	notif+=" register new film.";
	for(int i =0;i<followers.size();i++){
		std::cout<<i<<std::endl;
		(database->get_user_by_id(followers[i]))->add_notif(notif);
	}
}
void Publisher::sort_followers(){
	int temp;
	for(int i=0;i<followers.size();i++){
		if(i+1==followers.size())
			break;
		if(followers[i]>followers[i+1]){
			temp=followers[i];
			followers[i]=followers[i+1];
			followers[i+1]=temp;
		}
	}
}
void Publisher::add_follower(int user_id){
	followers.push_back(user_id);
	sort_followers();
}
void Publisher::delete_film(int film_id){
	for(int i=0;i<posted_films.size();i++)
		if(posted_films[i]==film_id){
			posted_films.erase(posted_films.begin()+film_id-1);
			return;
		}
	throw NotFound();
}
bool Publisher::find_film(int film_id){
	for(int i=0;i<posted_films.size();i++)
		if(posted_films[i]==film_id)
			return true;
	return false;
}#include "rate.h"

void Rate::post(User* logedin_user,std::map<std::string,std::string> informations){
	Film* film = new Film();
	if(logedin_user->film_bought(std::stoi(informations["film_id"],nullptr,0)))
		film->post_rate(logedin_user,informations);
	else
		throw PermissionDen();
}#include "reply_service.h"

void ReplyService::post(User* logedin_user,std::map<std::string,std::string> informations){
	int film_id=std::stoi(informations["film_id"],nullptr,0);
	int comment_id=std::stoi(informations["comment_id"],nullptr,0);
	std::string notif;
	if(!(logedin_user->get_type()))
		throw PermissionDen();
	if(logedin_user->find_film(film_id)){
		Database* database = database->get_instance();
		Film* film=database->get_film(film_id);
		Comment* comment=film->find_comment(comment_id);
		comment->post_reply(informations["content"]);
		notif+="Publisher ";
		notif+=logedin_user->get_username();
		notif+=" with id ";
		notif+=std::to_string(logedin_user->get_id());
		notif+=" reply to your comment.";
		(database->get_user_by_id(comment->get_user_id()))->add_notif(notif);
}
	else
		throw NotFound();
}#include "request.h"
Request::Request(){
	std::map<std::string,std::string> informations ();
}
using namespace std;
void Request::get_informations(std::map<std::string,std::string> _informations){
	informations.clear();
	informations = _informations;
}
void Request::signup(){
	Signup* signup = new Signup();
	logedin_user = new User(informations);
	logedin_user = signup->post(informations);
	std::cout<<"OK"<<std::endl;
}
void Request::login(){
	Login* login = new	Login();
	logedin_user = new User(informations);
	logedin_user = login->post(informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_money_user(){
	Money* money = new Money();
	money->post_user(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_films(){
	Film* film = new Film(informations,logedin_user->get_id());
	film->post(logedin_user);
	logedin_user->add_film(film->get_id());
	std::cout<<"OK"<<std::endl;
}
void Request::put_films(){
	FilmService* film_service = new FilmService();
	film_service->put(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::delete_films(){
	Film* film = new Film();
	logedin_user->delete_film(std::stoi(informations["film_id"],nullptr,0));
	film->delete_film(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::get_films_detail(){
	Film* film = new Film();
	film->get_detail(logedin_user,informations);
}
void Request::post_buy(){
	Buy* buy= new Buy();
	buy->post(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_followers(){
	Followers* followers = new Followers();
	followers->post(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_rate(){
	Rate* rate = new Rate();
	rate->post(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_comments(){
	Comment* comment = new Comment(informations["content"],logedin_user->get_id());
	comment->post(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::delete_comments(){
	Comment* comment = new Comment();
	comment->delete_comment(logedin_user,informations);
	std::cout<<"OK"<<std::endl;	
}
void Request::post_replies(){
	ReplyService* reply_service = new ReplyService ();
	reply_service->post(logedin_user,informations);
	std::cout<<"OK"<<std::endl;
}
void Request::post_money_publisher(){
	Money* money = new Money();
	money->post_publisher(logedin_user);
	std::cout<<"OK"<<std::endl;
}
void Request::get_notifications(){
	NotifService* notif_service = new NotifService();
	notif_service->get_notifications(logedin_user);
}
void Request::get_notifications_read(){
	NotifService* notif_service = new NotifService();
	notif_service->get_notifications_read(logedin_user,informations);
}
void Request::get_followers(){
	Followers* followers = new Followers();
	followers->get(logedin_user);
}
void Request::get_films_find(){
	Film* film = new Film();
	film->get_films(informations);
}#include "signup.h"


User* Signup::post(std::map<std::string,std::string> informations){
	Database* database = database->get_instance();
	if(database->existed_username(informations["username"]))
		throw BadRequest();
	if(informations["publisher"]=="true"){
		User* new_user = new Publisher(informations);
		database->add_user(new_user);
		return new_user;
	}
	else if(informations["publisher"]=="false" || informations["publisher"]=="\0"){
		User* new_user = new User(informations);
		database->add_user(new_user);
		return new_user;
	}
	else
		throw BadRequest();
}#include "user.h"
User::User(std::map<std::string,std::string> _informations){
	informations=_informations;
	username=informations["username"];
	password=informations["password"];
	email=informations["email"];
	age=informations["age"];
	money = 0;
	Database* database = database->get_instance();
	id=database->find_last_user()+1;
	if(informations["publisher"]=="true")
		type=PUBLISHER;
	else
		type=USER;
}
User::User(){
	id=0;
}
void User::get_login(){
	login=true;
}
void User::buy_film(int film_id,int price){
	if(film_bought(film_id))
		return;
	money-=price;
	purchased_films.push_back(film_id);
}

void User::follow_publisher(int pub_id){
	followed_publishers.push_back(pub_id);
}
bool User::existed_follower(int pub_id){
	for(int i =0 ;i <followed_publishers.size();i++)
		if(followed_publishers[i]==pub_id)
			return true;
	return false;
}
std::string User::get_username(){
	return username;
}
std::string User::get_password(){
	return password;
}
void User::add_money(int amount){
	money+=amount;
}
bool User::film_bought(int film_id){
	for(int i=0;i<purchased_films.size();i++)
		if(purchased_films[i]==film_id)
			return true;
	return false;
}
void User::read(){
	for(int i =0;i<unread_notifs.size();i++){
		read_notifs.push_back(unread_notifs[i]);
		unread_notifs[i]="";
	}
	unread_notifs.clear();
}
void User::print_unread_notifs(){
	std::cout<<"#. Notification Message"<<std::endl;
	for(int i=0 ;i<unread_notifs.size();i++)
		std::cout<<i+1<<". "<<unread_notifs[i]<<std::endl;
	read();
}
void User::print_read_notifs(int limit){
	std::cout<<"#. Notification Message"<<std::endl;
	if(limit>read_notifs.size())
		limit=read_notifs.size();
	for(int i=0 ;i<limit;i++)
		std::cout<<i+1<<". "<<read_notifs[i]<<std::endl;
}
void User::add_notif(std::string notif){
	unread_notifs.push_back(notif);
}

#include <map>
#include <string>
#include "database.h"
#include "user.h"
#include "exception.h"
class User;

class Buy{
public:
	void post(User* logedin_user,std::map<std::string,std::string> informations);
};
#ifndef COMMENT_H
#define COMMENT_H

#include <string>
#include "comment_service.h"
#include "user.h"

class User;
class CommentService;

class Comment{
public:
	Comment(std::string _content,int _user_id);
	Comment(){}
	void post(User* logedin_user,std::map<std::string,std::string> informations);
	void delete_comment(User* logedin_user,std::map<std::string,std::string> informations);
	void set_id(int _id);
	int get_user_id(){return user_id;}
	int get_id(){return id;}
	void post_reply(std::string content);
	int replies_num(){return replies.size();}
	std::string get_content(){return content;}
	std::string get_reply(int reply_id){return replies[reply_id];}
private:
	CommentService* service;
	std::vector<std::string> replies;
	std::string content;
	int id;
	int user_id;
};

#endif#ifndef COMMENT_SERVICE_H
#define COMMENT_SERVICE_H

#include <map>
#include <string>
#include "comment.h"
#include "database.h"
#include "exception.h"
#include "film.h"
#include "user.h"

class Comment;
class User;

class CommentService{
public:
	void post(Comment* comment,std::map<std::string,std::string> informations,User* logedin_user);
	void delete_comment(std::map<std::string,std::string> informations);
};

#endif#ifndef DATABASE_H
#define DATABASE_H

#include <iostream>
#include <vector>
#include <string>
#include "film.h"

class User;
class Film;

class Database{
public:
	static Database* get_instance();

	void add_film(Film* film);
	void add_user(User* user);
	void add_network_money(int money);
	void set_publisher_money(User* logedin_user);

	int find_last_film();
	int find_last_user();

	bool existed_username(std::string username);
	bool existed_film(int film_id);
	bool correct_password(std::string username,std::string password);
	bool existed_user_id(int user_id);

	User* get_user_by_id(int id);
	User* get_user(std::string username);
	Film* get_film(int film_id);
	Film* best_film();
	
	std::vector<Film*> get_sorted_films(User* logedin_user);
	std::vector<User*> get_all_users();
private:
	static Database* instance;
	void sort_films_by_rate(User* logedin_user);
	float network_money;
	std::vector<Film*>sorted_films;
	std::vector<Film*> films;
	std::vector<User*> users;
	Database();
};

#include "user.h"

#endif#ifndef EXCEPTION_H
#define EXCEPTION_H

#include <iostream>
#include <exception>


class BadRequest:public std::exception{
public:
	virtual const char* what() const throw () {return "Bad Request";}
};
class NotFound:public std::exception{
public:
	virtual const char* what() const throw () {return "Not Found";}
};
class PermissionDen:public std::exception{
	virtual const char* what() const throw () {return "Permission Denied";}
};
#endif#ifndef FILM_H
#define FILM_H

#include "database.h"
#include "film_service.h"
#include <map>
#include <string>
#include "user.h"
#include "comment.h"

class FilmService;
class Comment;

class Film{
public:
	Film(std::map<std::string,std::string> informations,int _publisher_id);
	Film();
	
	void post(User* logedin_user);
	void delete_film(User* logedin_user,std::map<std::string,std::string> informations);
	void put(std::map<std::string,std::string> informations);
	void set_rate(int user_id,int _rate);
	void print_details(User* logedin_user);
	void post_comment(Comment* new_comment);
	void get_detail(User* logedin_user,std::map<std::string,std::string> informations);
	void get_films(std::map<std::string,std::string> informations);
	void post_rate(User* logedin_user,std::map<std::string,std::string> informations);
	void delete_comment(int comment_id);
	void set_delete();

	int get_id(){return id;}
	int get_price(){return std::stoi(price,nullptr,0);}
	int get_publisher_id(){return publisher_id;}
	int get_comment_id();

	float get_rate(){return rate;}

	bool deleted(){return is_deleted;}
	bool check_name(std::string _name);
	bool check_rate(int min_rate);
	bool check_price(std::string _price);
	bool check_max_year(int max_year);
	bool check_min_year(int min_year);
	bool check_director(std::string _director);

	Comment* find_comment(int comment_id);
	std::string get_director(){return director;}
	std::string get_name(){return name;}
	std::string get_length(){return length;}
	std::string get_year(){return year;}
	std::string get_type(){return type;}
protected:
	FilmService* service;
	void change_infos(std::map<std::string,std::string> informations);
	float rate;
	bool is_deleted;
	int publisher_id;
	int id;
	int point;
	std::string type;
	std::map<int,int> rates;
	std::string name;
	std::string price;
	std::string year;
	std::string length;
	std::string summary;
	std::string director;
	std::vector<Comment*> comments;
};

#endif#ifndef FILM_SERVICE_H
#define FILM_SERVICE_H

#include "film.h"
#include <string>
#include <map>
#include "database.h"
#include "exception.h"
#include "user.h"

class Film;
class User;

class FilmService{
public:
	void post(Film* new_film,User* logedin_user);
	void put(User* logedin_user,std::map<std::string,std::string> informations);
	void delete_film(std::map<std::string,std::string> informations);
	void get(User* logedin_user,std::map<std::string,std::string> informations);
	void rate(User* logedin_user,std::map<std::string,std::string> informations);
	void search(std::map<std::string,std::string> informations);
	std::vector<Film*> recommend(User* logedin_user);
	void print(Film* film,int num);
};

#endif#include <map>
#include <string>
#include <vector>

#include "user.h"
#include "exception.h"
#include "database.h"
class Followers{
public: 
	void post(User* logedin_user, std::map<std::string,std::string> informations);
	void get(User* logedin_user);
};
#ifndef INPUT_HANDLER_H
#define INPUT_HANDLER_H

#include <string>
#include <vector>
#include <iostream>
#include <map>
#include "request.h"
#include "exception.h"
#include <regex>

class InputHandler{
public:
	InputHandler();
	void run();
private:
	void handle();
	void post();
	void put();
	void delete_func();
	void get();
	void check_email(std::string email);
	void check_num(std::string number);
	void get_informations();
	std::vector<std::string> input;
	std::map<std::string,std::string> informations;
	Request* request;
};

#endif#ifndef LOGIN_H
#define LOGIN_H

#include <map>
#include "exception.h"
#include "database.h"

class Login{
public:
	User* post(std::map<std::string,std::string> informations);
};
#endif#include <map>
#include <string>
#include <iostream>
#include "user.h"
#include "exception.h"

class Money{
public:
	void post_publisher(User* logedin_user);
	void post_user(User* logedin_user,std::map<std::string,std::string> informations);
};#ifndef NOTIF_SERVICE_H
#define NOTIF_SERVICE_H

#include "user.h"
#include "exception.h"

class User;

class NotifService{
public:
	void get_notifications(User* logedin_user);
	void get_notifications_read(User* logedin_user,std::map<std::string,std::string> informations);
};

#endif#ifndef PUBLISHER_H
#define PUBLISHER_H

#include "user.h"
#include <vector>
#include <string>
#include <iostream>

class Publisher:public User{
public:
	Publisher(std::map<std::string,std::string> _informations):User(_informations){type=PUBLISHER;}

	void add_film(int film_id);
	void add_follower(int user_id);
	void delete_film(int film_id);
	void send_notif_to_followers();

	std::vector<int> get_followers(){return followers;}

	bool find_film(int film_id);
private:
	void sort_followers();
	std::vector<int> posted_films;	
	std::vector<int> followers;	
};

#endif#include <map>
#include "film.h"
#include "user.h"

class User;

class Rate{
public:
	void post(User* user,std::map<std::string,std::string> informations);
};
#ifndef REPLY_SERVICE_H
#define REPLY_SERVICE_H

#include <map>
#include <string>
#include "user.h"
#include "comment.h"
#include "film.h"
#include "exception.h"

class User;

class ReplyService{
public:
	void post(User* logedin_user,std::map<std::string,std::string> informations);
};

#endif#ifndef REQUEST_H
#define REQUEST_H

#include <vector>
#include <string>
#include <iostream>
#include <map>
#include "signup.h"
#include "film.h"
#include "user.h"
#include "film_service.h"
#include "exception.h"
#include "login.h"
#include "money.h"
#include "buy.h"
#include "followers.h"
#include "rate.h"
#include "comment.h"
#include "comment_service.h"
#include "reply_service.h"
#include "notif_service.h"

class Request{
public:
	Request();
	void get_informations(std::map<std::string,std::string> _informations);
	void signup();
	void login();
	void post_money_user();
	void post_films();
	void put_films();
	void delete_films();
	void get_films_detail();
	void post_buy();
	void post_followers();
	void post_rate();
	void post_comments();
	void delete_comments();
	void post_replies();
	void post_money_publisher();
	void get_notifications();
	void get_notifications_read();
	void get_followers();
	void get_films_find();
	void get_published(){}
	void get_purchased(){}
private:
	std::map<std::string, std::string> informations;
	User* logedin_user;
};

#endif#ifndef SIGNUP_H
#define SIGNUP_H

#include "database.h"
#include "publisher.h"
#include "exception.h"
#include "user.h"
#include <string>
#include <iostream>
#include <map>

class Signup{
public:
	User* post(std::map<std::string,std::string> informations);	
};
#endif
#ifndef USER_H
#define USER_H

#include "database.h"
#include "exception.h"
#include <vector>
#include <string>
#include <iostream>
#include <map>

#define USER 0
#define PUBLISHER 1

class Database;

class User{
public:
	User(std::map<std::string,std::string> _informations);
	User();

	std::string get_username();
	std::string get_password();

	int get_type(){return type;}
	int get_id(){return id;}
	int get_money(){return money;}
	std::string get_email(){return email;}

	void get_login();
	void buy_film(int film_id,int price);
	void follow_publisher(int pub_id);
	void add_money(int amount);
	void print_unread_notifs();
	void print_read_notifs(int limit);
	void add_notif(std::string notif);

	bool film_bought(int film_id);
	bool existed_follower(int pub_id);

	virtual void add_film(int film_id){throw PermissionDen();}
	virtual void delete_film(int film_id){throw PermissionDen();}
	virtual bool find_film(int film_id){throw PermissionDen();}
	virtual void add_follower(int user_id){}
	virtual void send_notif_to_followers(){}
	virtual std::vector<int> get_followers(){throw PermissionDen();}
protected:
	void read();
	int type;
	int id;
	bool login;
	int money;
	std::string age;
	std::string username;
	std::string password;
	std::string email;
	std::map<std::string,std::string> informations;
	std::vector<int> purchased_films;
	std::vector<int> followed_publishers;
	std::vector<std::string> unread_notifs;
	std::vector<std::string> read_notifs;
};

#endifCC = g++ --std=c++11

all: 1.out

1.out: main.o input_handler.o request.o signup.o database.o user.o publisher.o login.o money.o film.o film_service.o buy.o followers.o rate.o comment.o comment_service.o reply_service.o notif_service.o
	$(CC) main.o input_handler.o request.o database.o user.o publisher.o signup.o login.o money.o film.o film_service.o buy.o followers.o rate.o comment.o comment_service.o reply_service.o notif_service.o -o 1.out

main.o: main.cpp input_handler.h
	$(CC) -c main.cpp -o main.o

input_handler.o: input_handler.cpp input_handler.h request.h exception.h
	$(CC) -c input_handler.cpp -o input_handler.o

request.o: request.cpp request.h exception.h signup.h user.h login.h money.h film.h film_service.h buy.h followers.h rate.h comment.h comment_service.h notif_service.h
	$(CC) -c request.cpp -o request.o

signup.o: signup.cpp signup.h database.h exception.h user.h publisher.h
	$(CC) -c signup.cpp -o signup.o

database.o: database.cpp database.h user.h film.h
	$(CC) -c database.cpp -o database.o

user.o: user.cpp user.h database.h exception.h
	$(CC) -c user.cpp -o user.o

publisher.o: publisher.cpp publisher.h user.h
	$(CC) -c publisher.cpp -o publisher.o

login.o: login.cpp login.h exception.h database.h
	$(CC) -c login.cpp -o login.o

money.o: money.cpp money.h user.h exception.h
	$(CC) -c money.cpp -o money.o

film.o: film.cpp film.h film_service.h database.h user.h comment.h
	$(CC) -c film.cpp -o film.o

film_service.o: film_service.cpp film_service.h film.h database.h exception.h user.h
	$(CC) -c film_service.cpp -o film_service.o

buy.o: buy.cpp buy.h exception.h user.h database.h
	$(CC) -c buy.cpp -o buy.o

followers.o: followers.cpp followers.h exception.h user.h database.h
	$(CC) -c followers.cpp -o followers.o

rate.o: rate.cpp rate.h film.h user.h
	$(CC) -c rate.cpp -o rate.o

comment.o: comment.cpp comment.h user.h comment_service.h
	$(CC) -c comment.cpp -o comment.o

comment_service.o: comment_service.cpp comment_service.h comment.h database.h exception.h film.h user.h
	$(CC) -c comment_service.cpp -o comment_service.o

reply_service.o: reply_service.cpp reply_service.h user.h comment.h film.h exception.h
	$(CC) -c reply_service.cpp -o reply_service.o

notif_service.o: notif_service.cpp notif_service.h user.h exception.h
	$(CC) -c notif_service.cpp -o notif_service.o

.PHONY: clean
clean:
	rm *.o
	rm 1.out